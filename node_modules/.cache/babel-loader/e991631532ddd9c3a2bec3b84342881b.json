{"ast":null,"code":"var _jsxFileName = \"/Users/evgeniy/React/user-list/src/components/UsersList/index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsers } from '../../redux/users/actions';\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TablePagination from '@material-ui/core/TablePagination';\nimport UserItem from './UserItem';\nimport Loader from '../../common/Loader';\nconst headRows = [{\n  id: 'avatar',\n  numeric: false,\n  label: 'User avatar'\n}, {\n  id: 'login',\n  numeric: false,\n  label: 'Login'\n}, {\n  id: 'profile link',\n  numeric: false,\n  label: 'Profile link'\n}];\n\nconst UsersList = () => {\n  const dispatch = useDispatch();\n  const {\n    data,\n    loading\n  } = useSelector(state => state.users.list);\n  const [page, setPage] = useState(localStorage.getItem(`users_page`));\n  const [rowsPerPage, setRowsPerPage] = useState(localStorage.getItem(`users_per_page`));\n  useEffect(() => {\n    const per_page = 100;\n    dispatch(getUsers(per_page));\n  }, [dispatch]);\n\n  const handleChangePage = (event, pageNum) => {\n    setPage(pageNum);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    handleChangePage(0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: \"m020\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    className: \"tableHead\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, headRows.map(row => /*#__PURE__*/React.createElement(TableCell, {\n    key: row.id,\n    align: row.numeric ? 'right' : 'left',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, row.label)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 22\n    }\n  }) : data === null || data === void 0 ? void 0 : data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(user => /*#__PURE__*/React.createElement(UserItem, {\n    key: user.id,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 20],\n    component: \"div\",\n    count: loading ? rowsPerPage : data === null || data === void 0 ? void 0 : data.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    backIconButtonProps: {\n      'aria-label': 'previous page'\n    },\n    nextIconButtonProps: {\n      'aria-label': 'next page'\n    },\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default UsersList;","map":{"version":3,"sources":["/Users/evgeniy/React/user-list/src/components/UsersList/index.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","getUsers","Paper","Table","TableHead","TableBody","TableRow","TableCell","TablePagination","UserItem","Loader","headRows","id","numeric","label","UsersList","dispatch","data","loading","state","users","list","page","setPage","localStorage","getItem","rowsPerPage","setRowsPerPage","per_page","handleChangePage","event","pageNum","handleChangeRowsPerPage","target","value","map","row","slice","user","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,eAAP,MAA4B,mCAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,MAAMC,QAAQ,GAAG,CACf;AAAEC,EAAAA,EAAE,EAAE,QAAN;AAAgBC,EAAAA,OAAO,EAAE,KAAzB;AAAgCC,EAAAA,KAAK,EAAE;AAAvC,CADe,EAEf;AAAEF,EAAAA,EAAE,EAAE,OAAN;AAAeC,EAAAA,OAAO,EAAE,KAAxB;AAA+BC,EAAAA,KAAK,EAAE;AAAtC,CAFe,EAGf;AAAEF,EAAAA,EAAE,EAAE,cAAN;AAAsBC,EAAAA,OAAO,EAAE,KAA/B;AAAsCC,EAAAA,KAAK,EAAE;AAA7C,CAHe,CAAjB;;AAMA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AACA,QAAM;AAAEkB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBlB,WAAW,CAACmB,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,IAAtB,CAArC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB1B,QAAQ,CAAC2B,YAAY,CAACC,OAAb,CAAsB,YAAtB,CAAD,CAAhC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC2B,YAAY,CAACC,OAAb,CAAsB,gBAAtB,CAAD,CAA9C;AAEA3B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM8B,QAAQ,GAAG,GAAjB;AACAZ,IAAAA,QAAQ,CAACf,QAAQ,CAAC2B,QAAD,CAAT,CAAR;AACD,GAHQ,EAGN,CAACZ,QAAD,CAHM,CAAT;;AAKA,QAAMa,gBAAgB,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3CR,IAAAA,OAAO,CAACQ,OAAD,CAAP;AACD,GAFD;;AAIA,QAAMC,uBAAuB,GAAGF,KAAK,IAAI;AACvCH,IAAAA,cAAc,CAAC,CAACG,KAAK,CAACG,MAAN,CAAaC,KAAf,CAAd;AACAL,IAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACD,GAHD;;AAKA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACL,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,QAAQ,CAACwB,GAAT,CAAaC,GAAG,iBACf,oBAAC,SAAD;AACE,IAAA,GAAG,EAAEA,GAAG,CAACxB,EADX;AAEE,IAAA,KAAK,EAAEwB,GAAG,CAACvB,OAAJ,GAAc,OAAd,GAAwB,MAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGuB,GAAG,CAACtB,KAJP,CADD,CADH,CADF,CADF,eAaE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,OAAO,gBAAG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACND,IADM,aACNA,IADM,uBACNA,IAAI,CAAEoB,KAAN,CAAYf,IAAI,GAAGI,WAAnB,EAAgCJ,IAAI,GAAGI,WAAP,GAAqBA,WAArD,EAAkES,GAAlE,CAAuEG,IAAD,iBACpE,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,IAAI,CAAC1B,EAApB;AAAwB,IAAA,IAAI,EAAE0B,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CAbF,CADF,eAqBE,oBAAC,eAAD;AACE,IAAA,kBAAkB,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CADtB;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,KAAK,EAAEpB,OAAO,GAAGQ,WAAH,GAAiBT,IAAjB,aAAiBA,IAAjB,uBAAiBA,IAAI,CAAEsB,MAHvC;AAIE,IAAA,WAAW,EAAEb,WAJf;AAKE,IAAA,IAAI,EAAEJ,IALR;AAME,IAAA,mBAAmB,EAAE;AACnB,oBAAc;AADK,KANvB;AASE,IAAA,mBAAmB,EAAE;AACnB,oBAAc;AADK,KATvB;AAYE,IAAA,YAAY,EAAEO,gBAZhB;AAaE,IAAA,mBAAmB,EAAEG,uBAbvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,CADK,CAAP;AAuCD,CA3DD;;AA6DA,eAAejB,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsers } from '../../redux/users/actions';\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TablePagination from '@material-ui/core/TablePagination';\nimport UserItem from './UserItem';\nimport Loader from '../../common/Loader';\n\nconst headRows = [\n  { id: 'avatar', numeric: false, label: 'User avatar' },\n  { id: 'login', numeric: false, label: 'Login' },\n  { id: 'profile link', numeric: false, label: 'Profile link' },\n];\n\nconst UsersList = () => {\n  const dispatch = useDispatch();\n  const { data, loading } = useSelector(state => state.users.list);\n  const [page, setPage] = useState(localStorage.getItem(`users_page`));\n  const [rowsPerPage, setRowsPerPage] = useState(localStorage.getItem(`users_per_page`));\n\n  useEffect(() => {\n    const per_page = 100;\n    dispatch(getUsers(per_page));\n  }, [dispatch])\n\n  const handleChangePage = (event, pageNum) => { \n    setPage(pageNum)\n  }\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value); \n    handleChangePage(0);\n  }\n  \n  return <div>\n    <Paper className='m020'>\n      <Table>\n        <TableHead >\n          <TableRow className='tableHead'>\n            {headRows.map(row => (\n              <TableCell\n                key={row.id}\n                align={row.numeric ? 'right' : 'left'}\n              >\n                {row.label}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {loading ? <Loader /> :\n            data?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((user) => (\n              <UserItem key={user.id} user={user} />\n            ))}\n        </TableBody>\n      </Table>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 20]}\n        component=\"div\"\n        count={loading ? rowsPerPage : data?.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        backIconButtonProps={{\n          'aria-label': 'previous page',\n        }}\n        nextIconButtonProps={{\n          'aria-label': 'next page',\n        }}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  </div>;\n};\n\nexport default UsersList;"]},"metadata":{},"sourceType":"module"}